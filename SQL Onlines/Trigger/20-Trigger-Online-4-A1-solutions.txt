1.

/*

CREATE TABLE EMP_SAL_LOG (
	LOG_ID NUMBER,
	EMPLOYEE_ID NUMBER,
	OLD_SALARY NUMBER,
	NEW_SALARY NUMBER,
	MOD_DATE DATE,
	USER_ID NUMBER,
	USERNAME VARCHAR2(100),
	STATUS VARCHAR2(10)
);

SELECT * FROM EMP_SAL_LOG;

INSERT INTO EMP_SAL_LOG(LOG_ID, EMPLOYEE_ID, OLD_SALARY, NEW_SALARY, MOD_DATE, STATUS)
VALUES(1,100,200,300,TO_DATE(SYSDATE),'APPROVED');

SELECT * FROM EMP_SAL_LOG;

*/

CREATE OR REPLACE TRIGGER EMP_LOG
AFTER INSERT OR DELETE
ON EMPLOYEES
FOR EACH ROW
DECLARE 
	
	NOW_COUNT NUMBER;
	NEW_LOG_ID NUMBER;
	
BEGIN 
	
	SELECT COUNT(*) INTO NOW_COUNT
	FROM EMP_SAL_LOG;
	
	IF NOW_COUNT = 0 THEN 
	
		NEW_LOG_ID := 1;
		
	ELSE 
	
		NEW_LOG_ID := (NOW_COUNT + 1);
		
	END IF;
	
	DBMS_OUTPUT.PUT_LINE(NEW_LOG_ID);
	
	IF INSERTING THEN 
	
		INSERT INTO EMP_SAL_LOG(LOG_ID, EMPLOYEE_ID, OLD_SALARY, NEW_SALARY, MOD_DATE, STATUS)
	VALUES(NEW_LOG_ID,:NEW.EMPLOYEE_ID,:OLD.SALARY,:NEW.SALARY,TO_DATE(SYSDATE),'APPROVED');
	
	ELSE 
	
		INSERT INTO EMP_SAL_LOG(LOG_ID, EMPLOYEE_ID, OLD_SALARY, NEW_SALARY, MOD_DATE, STATUS)
	VALUES(NEW_LOG_ID,:OLD.EMPLOYEE_ID,:OLD.SALARY,:NEW.SALARY,TO_DATE(SYSDATE),'APPROVED');
		
	END IF;

	
END;
/

DECLARE 
	
	
	
BEGIN 
	
	SHOW_DETAILED_ERRORS('TEST1');
	
END;
/


DECLARE 
	
	
	
BEGIN 

	INSERT INTO 
	EMPLOYEES(EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID)
	VALUES('22','A','B','C','333',ADD_MONTHS(TO_DATE(SYSDATE), -10*12),'IT_PROG',35000,0.2,100,90);

	INSERT INTO 
	EMPLOYEES(EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID)
	VALUES('77','P','Q','R','555',ADD_MONTHS(TO_DATE(SYSDATE), -10*12),'AD_VP',15000,0.5,100,90);

	DELETE
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID IN('22','77');
	
END;
/

SELECT * FROM EMPLOYEES ORDER BY EMPLOYEE_ID;
SELECT * FROM EMP_SAL_LOG ORDER BY LOG_ID;

2.


/*

CREATE TABLE EMP_SAL_LOG (
	LOG_ID NUMBER,
	EMPLOYEE_ID NUMBER,
	OLD_SALARY NUMBER,
	NEW_SALARY NUMBER,
	MOD_DATE DATE,
	USER_ID NUMBER,
	USERNAME VARCHAR2(100),
	STATUS VARCHAR2(10)
);

SELECT * FROM EMP_SAL_LOG;

INSERT INTO EMP_SAL_LOG(LOG_ID, EMPLOYEE_ID, OLD_SALARY, NEW_SALARY, MOD_DATE, STATUS)
VALUES(1,100,200,300,TO_DATE(SYSDATE),'APPROVED');

SELECT * FROM EMP_SAL_LOG;

*/

CREATE OR REPLACE TRIGGER SAL_UPD
AFTER UPDATE
OF SALARY
ON EMPLOYEES
FOR EACH ROW
DECLARE 
	
	NEW_LOG_ID NUMBER;
	NOW_COUNT NUMBER;
	NOW_SAL NUMBER;
	AGO NUMBER;
	LAST_DATE DATE;
	
BEGIN 
	
	SELECT COUNT(*) INTO NOW_COUNT
	FROM EMP_SAL_LOG;
	
	IF NOW_COUNT = 0 THEN 
	
		NEW_LOG_ID := 1;
		
	ELSE 
	
		NEW_LOG_ID := (NOW_COUNT + 1);
		
	END IF;
	
	DBMS_OUTPUT.PUT_LINE(NEW_LOG_ID);
	
	SELECT MAX(MOD_DATE) INTO LAST_DATE
	FROM EMP_SAL_LOG 
	WHERE EMPLOYEE_ID = :NEW.EMPLOYEE_ID;
	
	AGO := 1000;
	
	IF LAST_DATE IS NOT NULL THEN 
	
		AGO := LAST_DATE - TO_DATE(SYSDATE);
		
	END IF;
	
	SELECT SALARY INTO NOW_SAL
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID = :NEW.EMPLOYEE_ID;
	
	IF ((:NEW.SALARY) > (1.2*NOW_SAL)) || ((:NEW.SALARY) < (0.8*NOW_SAL)) THEN 
		
		INSERT INTO EMP_SAL_LOG(LOG_ID, EMPLOYEE_ID, OLD_SALARY, NEW_SALARY, MOD_DATE, STATUS)
	VALUES(NEW_LOG_ID,:NEW.EMPLOYEE_ID,:OLD.SALARY,:NEW.SALARY,TO_DATE(SYSDATE),'DENIED');
		DBMS_OUTPUT.PUT_LINE('SALARY UPDATE FAILED');
		RAISE_APPLICATION_ERROR(-20001, 'SALARY UPDATE FAILED');
		
	ELSIF AGO < 30  THEN
	
		INSERT INTO EMP_SAL_LOG(LOG_ID, EMPLOYEE_ID, OLD_SALARY, NEW_SALARY, MOD_DATE, STATUS)
	VALUES(NEW_LOG_ID,:NEW.EMPLOYEE_ID,:OLD.SALARY,:NEW.SALARY,TO_DATE(SYSDATE),'DENIED');
		DBMS_OUTPUT.PUT_LINE('SALARY UPDATE FAILED');
		RAISE_APPLICATION_ERROR(-20001, 'SALARY UPDATE FAILED');
		
	ELSE 
	
		INSERT INTO EMP_SAL_LOG(LOG_ID, EMPLOYEE_ID, OLD_SALARY, NEW_SALARY, MOD_DATE, STATUS)
	VALUES(NEW_LOG_ID,:NEW.EMPLOYEE_ID,:OLD.SALARY,:NEW.SALARY,TO_DATE(SYSDATE),'APPROVED');
		
	END IF;
	
	
END;
/





